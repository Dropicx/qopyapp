// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`, `from`

Future<ArcMutexP2PEngine> getEngine() =>
    P2PBridge.instance.api.crateApiGetEngine();

Future<String> initP2PEngine() =>
    P2PBridge.instance.api.crateApiInitP2PEngine();

Future<void> startPeerDiscovery({
  required String deviceName,
  required String deviceType,
}) => P2PBridge.instance.api.crateApiStartPeerDiscovery(
  deviceName: deviceName,
  deviceType: deviceType,
);

Future<void> stopPeerDiscovery() =>
    P2PBridge.instance.api.crateApiStopPeerDiscovery();

Future<List<FlutterPeer>> getDiscoveredPeers() =>
    P2PBridge.instance.api.crateApiGetDiscoveredPeers();

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < Mutex < P2PEngine > >>>
abstract class ArcMutexP2PEngine implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<P2PEngine>>
abstract class P2PEngine implements RustOpaqueInterface {
  Future<List<FlutterPeer>> discoverPeersWithTimeout({
    required BigInt timeoutSeconds,
  });

  Future<List<FlutterPeer>> getPeers();

  Future<String> getVersion();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<P2PEngine> newInstance() =>
      P2PBridge.instance.api.crateApiP2PEngineNew();

  Future<void> startDiscovery({
    required String deviceName,
    required String deviceType,
  });

  Future<void> stopDiscovery();
}

class FlutterPeer {
  final String id;
  final String name;
  final String ip;
  final int port;
  final String deviceType;
  final Map<String, String> properties;

  const FlutterPeer({
    required this.id,
    required this.name,
    required this.ip,
    required this.port,
    required this.deviceType,
    required this.properties,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      name.hashCode ^
      ip.hashCode ^
      port.hashCode ^
      deviceType.hashCode ^
      properties.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FlutterPeer &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name &&
          ip == other.ip &&
          port == other.port &&
          deviceType == other.deviceType &&
          properties == other.properties;
}
