// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class P2PBridge
    extends BaseEntrypoint<P2PBridgeApi, P2PBridgeApiImpl, P2PBridgeWire> {
  @internal
  static final instance = P2PBridge._();

  P2PBridge._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    P2PBridgeApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required P2PBridgeApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<P2PBridgeApiImpl, P2PBridgeWire> get apiImplConstructor =>
      P2PBridgeApiImpl.new;

  @override
  WireConstructor<P2PBridgeWire> get wireConstructor =>
      P2PBridgeWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 475141219;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'p2p_core',
        ioDirectory: null, // Use default platform-specific locations
        webPrefix: 'pkg/',
      );
}

abstract class P2PBridgeApi extends BaseApi {
  Future<List<FlutterPeer>> crateApiP2PEngineDiscoverPeersWithTimeout({
    required P2PEngine that,
    required BigInt timeoutSeconds,
  });

  Future<List<FlutterPeer>> crateApiP2PEngineGetPeers({
    required P2PEngine that,
  });

  Future<String> crateApiP2PEngineGetVersion({required P2PEngine that});

  Future<P2PEngine> crateApiP2PEngineNew();

  Future<void> crateApiP2PEngineStartDiscovery({
    required P2PEngine that,
    required String deviceName,
    required String deviceType,
  });

  Future<void> crateApiP2PEngineStopDiscovery({required P2PEngine that});

  Future<List<FlutterPeer>> crateApiGetDiscoveredPeers();

  Future<ArcMutexP2PEngine> crateApiGetEngine();

  Future<String> crateApiInitP2PEngine();

  Future<void> crateApiStartPeerDiscovery({
    required String deviceName,
    required String deviceType,
  });

  Future<void> crateApiStopPeerDiscovery();

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArcMutexP2PEngine;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArcMutexP2PEngine;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ArcMutexP2PEnginePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_P2PEngine;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_P2PEngine;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_P2PEnginePtr;
}

class P2PBridgeApiImpl extends P2PBridgeApiImplPlatform
    implements P2PBridgeApi {
  P2PBridgeApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<List<FlutterPeer>> crateApiP2PEngineDiscoverPeersWithTimeout({
    required P2PEngine that,
    required BigInt timeoutSeconds,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine(
            that,
            serializer,
          );
          sse_encode_u_64(timeoutSeconds, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_flutter_peer,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiP2PEngineDiscoverPeersWithTimeoutConstMeta,
        argValues: [that, timeoutSeconds],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiP2PEngineDiscoverPeersWithTimeoutConstMeta =>
      const TaskConstMeta(
        debugName: "P2PEngine_discover_peers_with_timeout",
        argNames: ["that", "timeoutSeconds"],
      );

  @override
  Future<List<FlutterPeer>> crateApiP2PEngineGetPeers({
    required P2PEngine that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_flutter_peer,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiP2PEngineGetPeersConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiP2PEngineGetPeersConstMeta =>
      const TaskConstMeta(debugName: "P2PEngine_get_peers", argNames: ["that"]);

  @override
  Future<String> crateApiP2PEngineGetVersion({required P2PEngine that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiP2PEngineGetVersionConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiP2PEngineGetVersionConstMeta =>
      const TaskConstMeta(
        debugName: "P2PEngine_get_version",
        argNames: ["that"],
      );

  @override
  Future<P2PEngine> crateApiP2PEngineNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiP2PEngineNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiP2PEngineNewConstMeta =>
      const TaskConstMeta(debugName: "P2PEngine_new", argNames: []);

  @override
  Future<void> crateApiP2PEngineStartDiscovery({
    required P2PEngine that,
    required String deviceName,
    required String deviceType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine(
            that,
            serializer,
          );
          sse_encode_String(deviceName, serializer);
          sse_encode_String(deviceType, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiP2PEngineStartDiscoveryConstMeta,
        argValues: [that, deviceName, deviceType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiP2PEngineStartDiscoveryConstMeta =>
      const TaskConstMeta(
        debugName: "P2PEngine_start_discovery",
        argNames: ["that", "deviceName", "deviceType"],
      );

  @override
  Future<void> crateApiP2PEngineStopDiscovery({required P2PEngine that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiP2PEngineStopDiscoveryConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiP2PEngineStopDiscoveryConstMeta =>
      const TaskConstMeta(
        debugName: "P2PEngine_stop_discovery",
        argNames: ["that"],
      );

  @override
  Future<List<FlutterPeer>> crateApiGetDiscoveredPeers() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_flutter_peer,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiGetDiscoveredPeersConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGetDiscoveredPeersConstMeta =>
      const TaskConstMeta(debugName: "get_discovered_peers", argNames: []);

  @override
  Future<ArcMutexP2PEngine> crateApiGetEngine() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexP2PEngine,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiGetEngineConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiGetEngineConstMeta =>
      const TaskConstMeta(debugName: "get_engine", argNames: []);

  @override
  Future<String> crateApiInitP2PEngine() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiInitP2PEngineConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiInitP2PEngineConstMeta =>
      const TaskConstMeta(debugName: "init_p2p_engine", argNames: []);

  @override
  Future<void> crateApiStartPeerDiscovery({
    required String deviceName,
    required String deviceType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(deviceName, serializer);
          sse_encode_String(deviceType, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiStartPeerDiscoveryConstMeta,
        argValues: [deviceName, deviceType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiStartPeerDiscoveryConstMeta => const TaskConstMeta(
    debugName: "start_peer_discovery",
    argNames: ["deviceName", "deviceType"],
  );

  @override
  Future<void> crateApiStopPeerDiscovery() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiStopPeerDiscoveryConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiStopPeerDiscoveryConstMeta =>
      const TaskConstMeta(debugName: "stop_peer_discovery", argNames: []);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArcMutexP2PEngine => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexP2PEngine;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArcMutexP2PEngine => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexP2PEngine;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_P2PEngine => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_P2PEngine => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine;

  @protected
  ArcMutexP2PEngine
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexP2PEngine(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcMutexP2PEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  P2PEngine
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return P2PEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  P2PEngine
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return P2PEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  P2PEngine
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return P2PEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_string_string(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  ArcMutexP2PEngine
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexP2PEngine(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcMutexP2PEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  P2PEngine
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return P2PEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  FlutterPeer dco_decode_flutter_peer(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return FlutterPeer(
      id: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      ip: dco_decode_String(arr[2]),
      port: dco_decode_u_16(arr[3]),
      deviceType: dco_decode_String(arr[4]),
      properties: dco_decode_Map_String_String_None(arr[5]),
    );
  }

  @protected
  List<FlutterPeer> dco_decode_list_flutter_peer(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_flutter_peer).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_String(arr[1]));
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  ArcMutexP2PEngine
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexP2PEngine(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcMutexP2PEngineImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  P2PEngine
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return P2PEngineImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  P2PEngine
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return P2PEngineImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  P2PEngine
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return P2PEngineImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ArcMutexP2PEngine
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexP2PEngine(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcMutexP2PEngineImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  P2PEngine
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return P2PEngineImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  FlutterPeer sse_decode_flutter_peer(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_ip = sse_decode_String(deserializer);
    var var_port = sse_decode_u_16(deserializer);
    var var_deviceType = sse_decode_String(deserializer);
    var var_properties = sse_decode_Map_String_String_None(deserializer);
    return FlutterPeer(
      id: var_id,
      name: var_name,
      ip: var_ip,
      port: var_port,
      deviceType: var_deviceType,
      properties: var_properties,
    );
  }

  @protected
  List<FlutterPeer> sse_decode_list_flutter_peer(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FlutterPeer>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_flutter_peer(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  (String, String) sse_decode_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexP2PEngine(
    ArcMutexP2PEngine self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcMutexP2PEngineImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine(
    P2PEngine self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as P2PEngineImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine(
    P2PEngine self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as P2PEngineImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine(
    P2PEngine self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as P2PEngineImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void sse_encode_Map_String_String_None(
    Map<String, String> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexP2PEngine(
    ArcMutexP2PEngine self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcMutexP2PEngineImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerP2PEngine(
    P2PEngine self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as P2PEngineImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_flutter_peer(FlutterPeer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.ip, serializer);
    sse_encode_u_16(self.port, serializer);
    sse_encode_String(self.deviceType, serializer);
    sse_encode_Map_String_String_None(self.properties, serializer);
  }

  @protected
  void sse_encode_list_flutter_peer(
    List<FlutterPeer> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_flutter_peer(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
    List<(String, String)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_record_string_string(
    (String, String) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class ArcMutexP2PEngineImpl extends RustOpaque implements ArcMutexP2PEngine {
  // Not to be used by end users
  ArcMutexP2PEngineImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcMutexP2PEngineImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: P2PBridge
        .instance
        .api
        .rust_arc_increment_strong_count_ArcMutexP2PEngine,
    rustArcDecrementStrongCount: P2PBridge
        .instance
        .api
        .rust_arc_decrement_strong_count_ArcMutexP2PEngine,
    rustArcDecrementStrongCountPtr: P2PBridge
        .instance
        .api
        .rust_arc_decrement_strong_count_ArcMutexP2PEnginePtr,
  );
}

@sealed
class P2PEngineImpl extends RustOpaque implements P2PEngine {
  // Not to be used by end users
  P2PEngineImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  P2PEngineImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        P2PBridge.instance.api.rust_arc_increment_strong_count_P2PEngine,
    rustArcDecrementStrongCount:
        P2PBridge.instance.api.rust_arc_decrement_strong_count_P2PEngine,
    rustArcDecrementStrongCountPtr:
        P2PBridge.instance.api.rust_arc_decrement_strong_count_P2PEnginePtr,
  );

  Future<List<FlutterPeer>> discoverPeersWithTimeout({
    required BigInt timeoutSeconds,
  }) => P2PBridge.instance.api.crateApiP2PEngineDiscoverPeersWithTimeout(
    that: this,
    timeoutSeconds: timeoutSeconds,
  );

  Future<List<FlutterPeer>> getPeers() =>
      P2PBridge.instance.api.crateApiP2PEngineGetPeers(that: this);

  Future<String> getVersion() =>
      P2PBridge.instance.api.crateApiP2PEngineGetVersion(that: this);

  Future<void> startDiscovery({
    required String deviceName,
    required String deviceType,
  }) => P2PBridge.instance.api.crateApiP2PEngineStartDiscovery(
    that: this,
    deviceName: deviceName,
    deviceType: deviceType,
  );

  Future<void> stopDiscovery() =>
      P2PBridge.instance.api.crateApiP2PEngineStopDiscovery(that: this);
}
